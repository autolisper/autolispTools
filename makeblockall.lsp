;return (ent (point1 . point2 ))

(defun HL:insertBoundingBox (allblocklist insertb ent / ab bb)  
  (if allblocklist
      (progn
        (setq ab (car allblocklist))
        (setq bb (car ab))
        (if (HL:isBoundingBoxCross bb insertb)
            (cons (cons (HL:mergeBoundingBox bb insertb) (cons ent (cdr ab))) (cdr allblocklist))
            (cons ab (HL:insertBoundingBox (cdr allblocklist) insertb ent))
        )
      )
      (list (cons insertb (list ent)))
  )
)
(defun c:makeblockall ( / selectset ent allblocklist tmp myset point bname OldOSNAP)
  (if (not HL:ISLOADUTILITY_LSP)
    (progn 
      (alert "you must load utility.lsp\n")
      (quit)
    )
  )  
  (HL:A_start)
  (HL:randinit)
  (setq selectset (HL:getNameList (ssget '((0 . "ARC,CIRCLE,LINE,LWPOLYLINE,SPLINE,ELLIPSE,INSERT")))))
  (foreach ent selectset    
    (setq allblocklist (HL:insertBoundingBox allblocklist (HL:getBoundingBox ent) ent))
  )
  (foreach tmp allblocklist
    (setq myset (HL:toSet (cdr tmp)))    
    (setq point (caar tmp))
    (setq point (list (car point) (cadr point) 0.0))    
    (setq point (trans point 0 1))      
    (setq bname (strcat "makeblockall" (itoa (HL:randrange 0 1000000))))
    (while (tblsearch "block" bname)
      (setq bname (strcat "makeblockall" (itoa (HL:randrange 0 1000000))))
    )
    (setq oldOSNAP (getvar "OSMODE"))
    (setvar "OSMODE" 0)
    (command-s "._-block" bname point myset "")
    (command-s "._-insert" bname point 1 1 0)
    (setvar "OSMODE" oldOSNAP)
  )  
  (HL:A_end)
)