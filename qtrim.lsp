(setq CUSTOMEQUALQUALITY 0.00000001)
(defun eqr(x y)
  (equal x y CUSTOMEQUALQUALITY)
)
(defun eqp (p0 p1 / x0 x1 y0 y1)
  (setq x0 (car p0))
  (setq y0 (cadr p0))
  (setq x1 (car p1))
  (setq y1 (cadr p1))
  (if (eqr x0 x1)
      (eqr y0 y1)
      nil
  )
)
(defun outerproduct ( v0 v1 / )
  (- (* (car v0) (car (cdr v1))) (* (car v1) (car (cdr v0))))
)
(defun rotate90 (v)
  (list (cadr v)(- 0 (car v)))
)
(defun -L (aL bL)
  (if (and aL bL)
      (cons (- (car aL) (car bL)) (-L (cdr aL) (cdr bL)))
    nil
    )
)
(defun +L (aL bL)
  (if (and aL bL)
      (cons (+ (car aL) (car bL)) (+L (cdr aL) (cdr bL)))
    nil
    )
)
(defun getL (p0 / xx yy)
  (setq xx (car p0))
  (setq yy (cadr p0))
  (sqrt (+ (* xx xx) (* yy yy)))
)
(defun lengthV (v l / d)
  (setq d (getL v))
  (list (* (/ (car v) d) l) (* (/ (cadr v) d) l))
)
(defun _qtrim ( l0 l1 lt / line l0s l1s lv bnormal op OldOsmode OldCmdEcho)
  
  ;calc normal
  (setq lv (-L l1 l0))
  (setq bnormal (rotate90 lv))
  (setq bnormal (lengthV bnormal 0.1))
  ;if trimside is left side flip bnormal
  (setq op (outerproduct lv (-L lt l0)))
  (if (> op 0)
      (setq bnormal (list (- 0 (car bnormal)) (- 0 (cadr bnormal))))
  )
  ;calc trim line point
  (setq l0s (+L l0 bnormal))
  (setq l1s (+L l1 bnormal))
  (setq OldOsmode (getvar "OSMODE"))
  (setq OldCmdEcho (getvar "CMDECHO"))
	(setvar "OSMODE" 0)		
  (setvar "CMDECHO" 0)
  ;make line
  (command "._LINE" l0 l1 "")
  (setq line (entlast))
  ;trim
  (command "._trim" line "" "F" l0s l1s "" "")
  ;delete line
  (command "._erase" line "")
  (setvar "OSMODE" OldOsmode)
  (setvar "CMDECHO" OldCmdEcho)
)
(defun c:qtrim ( / l0 l1 lt)
  (setq isok T)  
  (while isok
    (setq l0 (getpoint "first point:"))
    (princ "\n")
    (if l0
      (progn
        (setq l1 (getpoint "second point:" l0))
        (princ "\n")
        (if (and l1 (not (eqp l0 l1)))
          (progn
            (setq lt (getpoint "pick one trim side point:"))
            (princ "\n")
            (if lt
              (_qtrim l0 l1 lt)
              (setq isok nil)
            )
          )
          (setq isok nil)
        )
      )
      (setq isok nil)
    )
  )
)