
(setq ISLOADUTILITY_LSP T)
(setq CUSTOMEQUALQUALITY 0.00000001)
;common command
(defun saveVar()
         (setq OldOsmode (getvar "OSMODE"))
	(setq OldLayer (getvar "CLAYER"))
	(setq OldLType (getvar "CeLType"))
	(setq OldColor (getvar "CeColor"))
	(setq OldOrtho (getvar "ORTHOMODE"))
	(setq OldDStyle  (getvar "DIMSTYLE"))
  (princ)
)
(defun restoreVar()
  (setvar "OSMODE" OldOsmode)
  (setvar "CLAYER" OldLayer)
	(setvar "CeLType" OldLType)
	(setvar "CeColor" OldColor)
	(setvar "ORTHOMODE" OldOrtho)
	(if (and (/= (getvar "DIMSTYLE") OldDStyle)(tblsearch "DIMSTYLE" OldDStyle))
	(command "-dimstyle" "Restore" OldDStyle)
	)
  (princ)
) 
(defun A_start ()
        (setq OldCmdEcho (getvar "CMDECHO"))
	(setvar "CMDECHO" 0)
        (setq *error* *myerror*)
        (*push-error-using-command*) 
	(command "undo" "be")	
	(princ)
)


(defun AU_end ()
	(command "undo" "end")	
	(setvar "CMDECHO" OldCmdEcho)
        (setq *error* nil)
	(princ)
)
(defun A_end ()
	(AU_end)
        (*pop-error-mode*) 
	(princ)
)
(defun A_errorEnd()
  (AU_end)
  (command "._U")
  (*pop-error-mode*)
  (princ)
)


(defun *myerror* (msg)
	(A_errorEnd)
	(princ msg)
	(princ)
)


(defun A_dxf (g e)
	(cond
		((= (type e) 'ename) (cdr (assoc g (entget e))))
		((= (type e) 'list) (cdr (assoc g e)))
	)
)

(defun U_dxf (g u e )
  (setq e
	(cond
		((= (type e) 'ename) (entget e))
		((= (type e) 'list) e)
	)
  )
  (if (assoc g e)
     (subst (cons g u) (assoc g e) e)
     (cons (cons g u) e)
  )
)
;*************point to string******
(defun ptos (point)
  (strcat (rtos (car point)) " " (rtos (cadr point)))
  )
;*************"1,1"=> ("1","1")*****
(defun split (SD_Str / DataTemp m DataS DataN SD_List)
            (setq DataTemp (vl-string->list SD_Str))
            (setq m 0)
            (repeat (length DataTemp)
            (if     (/= (nth m DataTemp) 32)
                (setq DataS (append DataS (list (nth m DataTemp))))
                (progn  (setq DataN (append DataN (list DataS)))
                        (setq DataS nil)
                )
            )
            (setq m (1+ m))
            )
            (setq DataN (append DataN (list DataS)))
            (setq SD_List (mapcar 'vl-list->string DataN))
            SD_List
        )
;take num from head
(defun take (pL num)
  (if (or (not pL) (= num 0))
      nil
      (cons (car pL) (take (cdr pL) (1- num)))
  )
  )
;list plus
(defun +L (aL bL)
  (if (and aL bL)
      (cons (+ (car aL) (car bL)) (+L (cdr aL) (cdr bL)))
    nil
    )
)
(defun -L (aL bL)
  (if (and aL bL)
      (cons (- (car aL) (car bL)) (-L (cdr aL) (cdr bL)))
    nil
    )
)
(defun lessp (a b)
  (if (eqr a b)
      t
      (<= a b)
  )
)
(defun getD (p0 p1 / xx yy)
  (setq xx (- (car p0) (car p1)))
  (setq yy (- (cadr p0) (cadr p1)))
  (sqrt (+ (* xx xx) (* yy yy)))
)
(defun getL (p0 / xx yy)
  (setq xx (car p0))
  (setq yy (cadr p0))
  (sqrt (+ (* xx xx) (* yy yy)))
)
;;return vector V length l
(defun lengthV (v l / d)
  (setq d (getL v))
  (list (* (/ (car v) d) l) (* (/ (cadr v) d) l))
)

(defun rotate90 (v)
  (list (cadr v)(- 0 (car v)))
)
(defun scalarMul(a aL)
  (mapcar '(lambda (x) (* a x)) aL)
)
(defun outerproduct ( v0 v1 / )
  (- (* (car v0) (car (cdr v1))) (* (car v1) (car (cdr v0))))
)
(defun innerproduct ( v0 v1 / )
  (+ (* (car v0) (car v1)) (* (cadr v0) (cadr v1)))
)
(defun neg (a)
  (- 0 a)
)
;real eq
(defun eqr(x y)
  (equal x y CUSTOMEQUALQUALITY)
)
;2d point <
(defun compp (p0 p1 / x0 x1 y0 y1)
  (setq x0 (car p0))
  (setq y0 (cadr p0))
  (setq x1 (car p1))
  (setq y1 (cadr p1))
  (if (equal x0 x1 CUSTOMEQUALQUALITY)
      (< y0 y1)
      (< x0 x1)
  )
)
;2d point eq
(defun eqp (p0 p1 / x0 x1 y0 y1)
  (setq x0 (car p0))
  (setq y0 (cadr p0))
  (setq x1 (car p1))
  (setq y1 (cadr p1))
  (if (eqr x0 x1)
      (eqr y0 y1)
      nil
  )
)
;get All curve around point
(defun getCurveSetAroundPoint (point)
  (ssget "_C" (+L point '(0.1 0.1)) (+L point '(-0.1 -0.1)) '((0 . "ARC,CIRCLE,LINE,LWPOLYLINE,SPLINE,ELLIPSE")))
)

(defun isCurve (item)
   (member (A_dxf 0 item) '("ARC" "CIRCLE" "LINE" "LWPOLYLINE" "SPLINE" "ELLIPSE"))
)
;point is on curve except oname
(defun isOnCurve(oname point / ObjSet i0 name isok)
  (setq ObjSet (getCurveSetAroundPoint point))
  (setq i0 -1)
  (setq isok nil)
  (if (not ObjSet)
     nil;(progn (princ "オブジェクトなし") (princ))
     (progn
       (repeat (sslength ObjSet)
        (setq name (ssname ObjSet (setq i0 (1+ i0))))
        (if (equal name oname)
           nil
           (if (eqp (vlax-curve-getClosestPointTo  name point) point)
             (setq isok t)
          )
        )
     )
     isok
     )
 )
)
(defun isOnCurveEndPoint(oname point / ObjSet i0 name pointL isOn p)
  (setq ObjSet (getCurveSetAroundPoint point))
  (setq i0 -1)
  (setq pointL nil)
  (if (not ObjSet)
    nil
    (progn 
  (repeat (sslength ObjSet)
	  (setq name (ssname ObjSet (setq i0 (1+ i0))))
    	  (if (not (equal name oname))
    	      (setq pointL (cons (vlax-curve-getEndPoint name ) (cons (vlax-curve-getStartPoint name) pointL)))
          )
  )
  (setq isOn nil)
  (foreach p pointL
    (if (eqp p point)
        (setq isOn t)
    )
  )
  isOn
  )
  )
)
(defun isOnCurveEndAndQuadrantPoint(oname point / ObjSet i0 name pointL isOn p)
  (setq ObjSet (getCurveSetAroundPoint point))
  (setq i0 -1)
  (setq pointL nil)
  (if (not ObjSet)
    nil
    (progn 
  (repeat (sslength ObjSet)
	  (setq name (ssname ObjSet (setq i0 (1+ i0))))
    	  (if (not (equal name oname))
	      (progn
    	        (setq pointL (cons (vlax-curve-getEndPoint name ) (cons (vlax-curve-getStartPoint name) pointL)))
		(cond ((or (= (getType name) "ARC") (= (getType name) "CIRCLE")) (setq pointL (append (getQuadrantPoint name) pointL)))
		      ((= (getType name) "ELLIPSE") (setq pointL (append (getEllipseQuadrantPoint name) pointL)))
		)
	      )
          )
  )
  (setq isOn nil)
  (foreach p pointL
    (if (eqp p point)
        (setq isOn t)
    )
  )
  isOn
  )
  )
)

;select set to ename list
(defun getNameList (set / pL i)
  (if (/= set nil)
    (progn
  (setq i 0)
  (repeat (sslength set)
      (setq pL (cons (ssname set i) pL))
      (setq i (1+ i))
  )
  pL
  )
  nil
  )
)

(defun getCurveLength (item)
  (vlax-curve-getDistAtParam item (vlax-curve-getEndParam item))
)
;ename list to select set
(defun toSet(nL / ss item)
  (setq ss (ssadd))
  (foreach item nL
    (setq ss (ssadd item ss))
  )
)

(defun changeColor(e c)
  (command-s "._chprop" e "" "C" c "")
)
;recursively exploce blocks and return the list of enames
(defun explodeBlocksAndGetNameList(nL / name tL rL)
  (while nL
   (setq tL nil)
   (foreach name nL
     (if (or (equal (A_dxf 0 name) "LWPOLYLINE")(equal (A_dxf 0 name) "INSERT"))
         (progn 
          (command "._explode" name)
           (setq tL (append (getNameList (ssget "p")) tL))
	 )
         (setq rL (cons name rL))
     )
   )
   (setq nL tL)
  )
  rL
)
(defun changeToBlock ( ss )
  (if (listp ss)
      (setq ss (toSet ss))
  )
  (command "._copybase" '(0 0) ss "")
  (command "._pasteblock" '(0 0))
  (command "._erase" ss "")
  (princ)
)
;return the ename list of block
(defun getBlockEntities (insertBlockName / entity rL)
  (setq entity (tblobjname "block" (A_dxf 2 insertBlockName)))
  (while (setq entity (entnext entity))
    (setq rL (cons entity rL))
  )
)
;
(defun intersparse (list object)
  (if (cdr list)
      (cons (car list) (cons object (intersparse (cdr list) object)))
      list
    )
)
;
(defun joinStr(strList str)
  (apply 'strcat (intersparse strList str))
  )
(defun isInAngle(sa ea a)
  (while (>= sa (* 2 pi))
     (setq sa (- sa (* 2 pi)))
  )
  (while (>= ea (* 2 pi))
     (setq ea (- ea (* 2 pi)))
  )
  (if (eqr sa ea)
       t
      (if (lessp sa ea)
        (and (lessp sa a) (lessp a ea))
        (or (and (lessp sa a) (lessp a (* 2.0 PI))) (and (lessp 0 a) (lessp a ea)))
      )
  )
)
;;
(defun getType (o)
  (A_dxf 0 o)
)
(defun getRadius(o)
  (A_dxf 40 o)
)
(defun getStartAngle(o)
  (A_dxf 50 o)
)
(defun getEndAngle(o)
  (A_dxf 51 o)
)
(defun getColor(o)
  (A_dxf 62 o)
)
(defun getCenter(o)
  (A_dxf 10 o)
)
(defun get90D()
  (* 0.5 pi)
)
(defun get180D()
  (* 1.0 pi)
)
(defun get270D()
  (* 1.5 pi)
)
;return point on object o at angle a
(defun getCirclePoint (o a / otype)
  (setq otype (getType o))
  (if (or (equal otype "ARC") (equal otype "CIRCLE"))
      (polar (getCenter o) a (getRadius o))
      (ErrorNotArcOrCircle)
  )
)
(defun _getEdgePoint(o / sa ea cp r sp ep)
  (setq sa (getStartAngle o))
  (setq ea (getEndAngle o))
  (setq cp (getCenter o))
  (setq r (getRadius o))
  (setq sp (polar cp sa r))
  (setq ep (polar cp ea r))
  (inters sp (polar sp (+ sa (get90D)) r) ep (polar ep (+ ea (get90D)) r) nil)
)
;;ARC intersect point; fillet point
(defun getEdgePoint(o / otype)
  (setq otype (getType o))
  (if (equal otype "ARC")
      (_getEdgePoint o)
      (ErrorNotARC)
  )
)
(defun vlax-ldata-erase (dict / key)
  (foreach key (mapcar 'car (vlax-ldata-list dict)) (vlax-ldata-delete dict key))
  )
(defun changeToGroup (objSet)
  (command "._group" "C" "*" "*" objSet "")
  )
(defun getQuadrantPoint(o / angleL a sA eA)
  (setq angleL nil)
  (setq sA (getStartAngle o))
  (setq eA (getEndAngle o))
  (foreach a (list 0 (get90D) (get180D) (get270D))
    (if (or (= (getType o) "CIRCLE") (isInAngle sA eA a))
        (setq angleL (cons (getCirclePoint o a) angleL))
    )
  )
  angleL
)
(defun getEllipseQuadrantPoint(o / angleL center vecx vecy ratio sA eA pairList i)
  (setq angleL nil)
  (setq center (getCenter o))
  (setq ratio (A_dxf 40 o))
  (setq vecx (A_dxf 11 o))
  (setq vecy (scalarMul ratio (list (neg (cadr vecx)) (car vecx) (caddr vecx))))
  (setq sA (A_dxf 41 o))
  (setq eA (A_dxf 42 o))
  ;dxf 210 z -1 means reverse
  (if (eqr -1.0 (caddr (A_dxf 210 o)))
      (progn
	(setq vecx (mapcar 'neg vecx))
	(setq vecy (mapcar 'neg vecy))
      )
  )
  (setq pairList (mapcar 'cons (list 0 (get90D) (get180D) (get270D)) (list (+L center vecx) (+L center vecy) (-L center vecx) (-L center vecy))))
  (foreach i pairList
     (if (or (eqr sA eA) (isInAngle sA eA (car i)))
         (setq angleL (cons (cdr i) angleL))
     )
  )
  angleL
)
(defun difflist (a b)
  (while (and a b)
    	 (if (/= (car a) (car b))
	     (progn
	       (print a)
	       (print b)
	     )
	 )
         (setq a (cdr a))
         (setq b (cdr b))
  )
)
;random
(setq RANDOM_SEED 100)
(defun randinit () 
  (setq RANDOM_SEED (getseconds))
  (randreal 1.0)
  (randreal 1.0)
  (randreal 1.0)
)
(defun rand ( maxi ) 
  (fix (randreal maxi))  
)
(defun randreal (maxi)
  (setq RANDOM_SEED (rem (* 48271.0 RANDOM_SEED) 2147483647.0))  
  (* maxi (/ RANDOM_SEED 2147483647.0))
)
(defun randrealrange(mini maxi)
  (+ mini (randreal (- maxi mini)))
)
(defun randrange (mini maxi)
  (+ mini (rand (- maxi mini)))
)
(defun getseconds ( / s)
  (setq s (getvar "DATE"))
  (fix (* 86400.0 (- s (fix s))))
)
;for active-x
(setq *acadobject* nil) ; Initialize global variable
(defun acadobject ()
  (cond (*acadobject*) ; Return the cached object
    (t
      (setq *acadobject* (vlax-get-acad-object))
    )
  )
)

(setq *activedocument* nil) ; Initialize global variable
(defun activedocument ()
  (cond (*active-document*) ; Return the cached object
    (t
      (setq *activedocument* (vla-get-activedocument (acadobject)))
    )
  )
)

(setq *modelspace* nil) ; Initialize global variable
(defun modelspace ()
  (cond (*modelspace*) ; Return the cached object
    (t
      (setq *modelspace* (vla-get-modelspace (activedocument)))
    )
  )
)
(princ)